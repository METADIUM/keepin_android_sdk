package com.coinplug.metadium.core.contract;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Bytes4;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import io.reactivex.Flowable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.0-alpha-1.
 */
public class MetaIdentity extends Contract {
    private static final String BINARY = "6080604052600160008190558080556005805460ff191690556007553480156200002857600080fd5b5060405160208062004764833981016040525160006001600682620000556401000000006200022b810204565b7fffffffff0000000000000000000000000000000000000000000000000000000016815260208101919091526040016000908120805460ff191692151592909217909155600190600690620000b26401000000006200024f810204565b7fffffffff0000000000000000000000000000000000000000000000000000000016815260208101919091526040016000908120805460ff1916921515929092179091556001906006906200010f64010000000062000273810204565b7fffffffff000000000000000000000000000000000000000000000000000000001681526020810191909152604001600020805460ff1916911515919091179055620001648264010000000062000297810204565b90506200017d81600180640100000000620002a3810204565b620001958160026001640100000000620002a3810204565b620001ad8160036001640100000000620002a3810204565b60016000818155818055600690620001cd64010000000062000273810204565b620001e06401000000006200024f810204565b187fffffffff000000000000000000000000000000000000000000000000000000001681526020810191909152604001600020805460ff191691151591909117905550620003669050565b7f01ffc9a70000000000000000000000000000000000000000000000000000000090565b7fdc3d2a7b0000000000000000000000000000000000000000000000000000000090565b7f107653790000000000000000000000000000000000000000000000000000000090565b600160a060020a031690565b620002c060028484846401000000006200402b620002f482021704565b6040518190839085907f480000bb1edad8ca1470381cc334b1917fbd51c6531f3a623ea8e0ec7e38a6e990600090a4505050565b60008381526020858152604082208054600181018255818452919092200183905560028101541515620003305760028101849055600181018290555b50506000908152600180840160209081526040832080548084018255908452922090910191909155600290910180549091019055565b6143ee80620003766000396000f30060806040526004361061028f5763ffffffff60e060020a60003504166301ffc9a7811461029157806302e7491e146102c75780630440b43a146102f9578063058b316c1461032057806312aaac7014610335578063190db862146103ae5780631d203be8146103d25780631d3812401461043b578063251de3e9146102f9578063262b54f5146104595780632d32d442146104c15780632e7700f0146104d657806338f4edd4146104eb5780633b8a12c8146105005780633f4ba83a1461057a57806349991ec8146103205780634da34c2c1461058f5780634eee424a1461063c57806353d413c5146106545780635c975abb1461066f5780635d7bc3fc146106845780635dccebba1461069c57806363f14c3c146107535780636e4c431114610774578063710ca55014610320578063724a4b3b1461078f578063747442d3146107c557806375e5598c146104c1578063765b3042146107e25780637d96fa581461081357806382d09446146103205780638456cb59146108285780639010f7261461083d5780639e140cc814610855578063a550f0c7146104c1578063aa0a51421461086a578063ae62838614610855578063affed0e01461087f578063b132734e14610894578063b1a34e0d146108a9578063b1e9f64c14610991578063b61d27f6146109a6578063b9133d6314610a0f578063bf2f20ad14610a24578063c32b351814610a39578063c6702187146102f9578063c9100bcb14610a92578063c9d24ecc14610c15578063ccfe586814610c2a578063d202158d14610c42578063dbfa74b714610991578063e0610ba314610c5d578063e99896b814610d83578063ead09fab14610d9b578063f22d08a6146104c1578063f5074f4114610db0578063fc0fc84914610dd1575b005b34801561029d57600080fd5b506102b3600160e060020a031960043516610de6565b604080519115158252519081900360200190f35b3480156102d357600080fd5b506102dc610e05565b60408051600160e060020a03199092168252519081900360200190f35b34801561030557600080fd5b5061030e610e2a565b60408051918252519081900360200190f35b34801561032c57600080fd5b5061030e610e2f565b34801561034157600080fd5b5061034d600435610e34565b60408051602080820185905291810183905260608082528551908201528451909182916080830191878101910280838360005b83811015610398578181015183820152602001610380565b5050505090500194505050505060405180910390f35b3480156103ba57600080fd5b5061030e600160a060020a0360043516602435610ed9565b3480156103de57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261030e948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610f869650505050505050565b34801561044757600080fd5b506102b3600435602435604435611086565b34801561046557600080fd5b506104716004356110df565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104ad578181015183820152602001610495565b505050509050019250505060405180910390f35b3480156104cd57600080fd5b5061030e611142565b3480156104e257600080fd5b5061030e611147565b3480156104f757600080fd5b5061030e61114d565b34801561050c57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261055e9583359536956044949193909101919081908401838280828437509497506111539650505050505050565b60408051600160a060020a039092168252519081900360200190f35b34801561058657600080fd5b5061028f611256565b34801561059b57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261030e948235600160a060020a031694602480359536959460649492019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b8a359b909a9099940197509195509182019350915081908401838280828437509497506112af9650505050505050565b34801561064857600080fd5b506102b36004356113da565b34801561066057600080fd5b506102b36004356024356119e3565b34801561067b57600080fd5b506102b3611a7a565b34801561069057600080fd5b506102b3600435611a83565b3480156106a857600080fd5b506106b4600435611dec565b6040518085600160a060020a0316600160a060020a0316815260200184815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156107155781810151838201526020016106fd565b50505050905090810190601f1680156107425780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561075f57600080fd5b5061030e600160a060020a0360043516611ea8565b34801561078057600080fd5b5061055e600435602435611eb4565b34801561079b57600080fd5b506102b3600435600160a060020a0360243516600160e060020a0319604435166064351515611eeb565b3480156107d157600080fd5b506102b36004356024351515611f4c565b3480156107ee57600080fd5b506102b3600435600160a060020a0360243516600160e060020a0319604435166122eb565b34801561081f57600080fd5b506102dc61232d565b34801561083457600080fd5b5061028f612351565b34801561084957600080fd5b506104716004356123ac565b34801561086157600080fd5b5061030e61240d565b34801561087657600080fd5b5061030e612412565b34801561088b57600080fd5b5061030e612418565b3480156108a057600080fd5b5061030e61241e565b3480156108b557600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261030e948035946024803595600160a060020a0360443516953695608494930191819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506124239650505050505050565b34801561099d57600080fd5b5061030e6128d4565b3480156109b257600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261030e948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506128d99650505050505050565b348015610a1b57600080fd5b5061030e612900565b348015610a3057600080fd5b506102dc612905565b348015610a4557600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102dc9436949293602493928401919081908401838280828437509497506129299650505050505050565b348015610a9e57600080fd5b50610aaa6004356129ad565b6040518087815260200186815260200185600160a060020a0316600160a060020a03168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015610b13578181015183820152602001610afb565b50505050905090810190601f168015610b405780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015610b73578181015183820152602001610b5b565b50505050905090810190601f168015610ba05780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b83811015610bd3578181015183820152602001610bbb565b50505050905090810190601f168015610c005780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b348015610c2157600080fd5b5061030e612c03565b348015610c3657600080fd5b5061028f600435612c09565b348015610c4e57600080fd5b506102b3600435602435612c5c565b348015610c6957600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526102b3948035946024803595600160a060020a0360443516953695608494930191819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750612c709650505050505050565b348015610d8f57600080fd5b5061028f600435613091565b348015610da757600080fd5b5061030e6130e4565b348015610dbc57600080fd5b5061028f600160a060020a03600435166130e9565b348015610ddd57600080fd5b5061030e61311d565b600160e060020a03191660009081526006602052604090205460ff1690565b7f01ffc9a7000000000000000000000000000000000000000000000000000000005b90565b600381565b600181565b6060600080610e4161420e565b60008581526002602090815260409182902082518154608093810282018401909452606081018481529093919284928491840182828015610ea157602002820191906000526020600020905b815481526020019060010190808311610e8d575b505050918352505060018201546020808301919091526002909201546040918201528251918301519201519097919650945092505050565b600082826040516020018083600160a060020a0316600160a060020a03166c01000000000000000000000000028152601401828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310610f535780518252601f199092019160209182019101610f34565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209695505050505050565b60008383836040516020018084600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140183815260200182805190602001908083835b60208310610fea5780518252601f199092019160209182019101610fcb565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506040516020818303038152906040526040518082805190602001908083835b6020831061104f5780518252601f199092019160209182019101611030565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902090505b9392505050565b6000611090613123565b151561109b57600080fd5b60055460ff16156110ab57600080fd5b6110bd6002858563ffffffff61315516565b156110ca5750600061107f565b6110d5848484613239565b5060019392505050565b6000818152600b602090815260409182902080548351818402810184019094528084526060939283018282801561113657602002820191906000526020600020905b81548152600190910190602001808311611121575b50505050509050919050565b600281565b60075490565b60015481565b600061107f826040805190810160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250856040516020018083805190602001908083835b602083106111c25780518252601f1990920191602091820191016111a3565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b602083106112225780518252601f199092019160209182019101611203565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120939250506132809050565b61125e613123565b151561126957600080fd5b60055460ff16151561127a57600080fd5b6005805460ff191690556040517f730c1faaa977b67dacf1e2451ef54556e04a07d577785ff79f6d31f73502efc990600090a1565b600554600090819060ff16156112c457600080fd5b6113bf878787876040516020018085600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140184815260200183805190602001908083835b6020831061132a5780518252601f19909201916020918201910161130b565b51815160209384036101000a6000190180199092169116179052920193845250604080518085038152938201908190528351939650945084935085019190508083835b6020831061138c5780518252601f19909201916020918201910161136d565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902084611153565b90506113cd81888888613350565b91505b5095945050505050565b60006113e461422e565b600554600090819060ff16156113f957600080fd5b6000858152600a60205260409020600201548590600160a060020a031680151561142257600080fd5b61142a613123565b156114345761150d565b33600160a060020a038216141561144a5761150d565b61146b61145561232d565b600160a060020a0383169063ffffffff61350c16565b156115085780600160a060020a031663d202158d61148833611ea8565b6040805160e060020a63ffffffff85160281526004810192909252600260248301525160448083019260209291908290030181600087803b1580156114cc57600080fd5b505af11580156114e0573d6000803e3d6000fd5b505050506040513d60208110156114f657600080fd5b5051151561150357600080fd5b61150d565b600080fd5b6000878152600a6020908152604091829020825160c0810184528154815260018083015482850152600280840154600160a060020a0316838701526003840180548751601f9482161561010002600019019091169290920492830186900486028201860190965281815291949293606086019391908301828280156115d35780601f106115a8576101008083540402835291602001916115d3565b820191906000526020600020905b8154815290600101906020018083116115b657829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156116675780601f1061163c57610100808354040283529160200191611667565b820191906000526020600020905b81548152906001019060200180831161164a57829003601f168201915b505050918352505060058201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156116fb5780601f106116d0576101008083540402835291602001916116fb565b820191906000526020600020905b8154815290600101906020018083116116de57829003601f168201915b505050919092525050506040810151909550600160a060020a0316151561172157600080fd5b6000878152600a6020526040812081815560018101829055600281018054600160a060020a031916905590611759600383018261426e565b61176760048301600061426e565b61177560058301600061426e565b505084516000908152600b60205260408120945092505b835483101561182c57835487908590859081106117a557fe5b6000918252602090912001541415611821578354849060001981019081106117c957fe5b906000526020600020015484848154811015156117e257fe5b60009182526020909120015583548490600019810190811061180057fe5b6000918252602082200155835461181b8560001983016142b5565b5061182c565b60019092019161178c565b600c60008154809291906001900391905055508460400151600160a060020a0316856000015188600019167f3cf57863a89432c61c4a27073c6ee39e8a764bff5a05aebfbcdcdc80b2e6130a886020015189606001518a608001518b60a0015160405180858152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156118d75781810151838201526020016118bf565b50505050905090810190601f1680156119045780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b8381101561193757818101518382015260200161191f565b50505050905090810190601f1680156119645780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b8381101561199757818101518382015260200161197f565b50505050905090810190601f1680156119c45780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a45060019695505050505050565b6000806119ee613123565b15156119f957600080fd5b60055460ff1615611a0957600080fd5b611a1b6002858563ffffffff61315516565b1515611a2a5760009150611a73565b611a3c6002858563ffffffff6135c316565b6040519091508190849086907f585a4aef50f8267a92b32412b331b20f7f8b96f2245b253b9cc50dcc621d339790600090a4600191505b5092915050565b60055460ff1681565b6000611a8d61422e565b60055460ff1615611a9d57600080fd5b6000838152600a60205260409020600201548390600160a060020a0316801515611ac657600080fd5b611ace613123565b15611ad857611b91565b33600160a060020a0382161415611aee57611b91565b611af961145561232d565b156115085780600160a060020a031663d202158d611b1633611ea8565b6040805160e060020a63ffffffff85160281526004810192909252600260248301525160448083019260209291908290030181600087803b158015611b5a57600080fd5b505af1158015611b6e573d6000803e3d6000fd5b505050506040513d6020811015611b8457600080fd5b50511515611b9157600080fd5b6000858152600a6020908152604091829020825160c0810184528154815260018083015482850152600280840154600160a060020a0316838701526003840180548751601f948216156101000260001901909116929092049283018690048602820186019096528181529194929360608601939190830182828015611c575780601f10611c2c57610100808354040283529160200191611c57565b820191906000526020600020905b815481529060010190602001808311611c3a57829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015611ceb5780601f10611cc057610100808354040283529160200191611ceb565b820191906000526020600020905b815481529060010190602001808311611cce57829003601f168201915b505050918352505060058201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015611d7f5780601f10611d5457610100808354040283529160200191611d7f565b820191906000526020600020905b815481529060010190602001808311611d6257829003601f168201915b505050919092525050506040810151909350600160a060020a03161515611da557600080fd5b611dc68360000151846020015185604001518660600151876080015161376e565b1515611ddf57611dd5856113da565b5060009350611de4565b600193505b505050919050565b60086020908152600091825260409182902080546001808301546002808501805488516101009582161595909502600019011691909104601f8101879004870284018701909752868352600160a060020a03909316959094919291830182828015611e985780601f10611e6d57610100808354040283529160200191611e98565b820191906000526020600020905b815481529060010190602001808311611e7b57829003601f168201915b5050505050908060030154905084565b600160a060020a031690565b600960205281600052604060002081815481101515611ecf57fe5b600091825260209091200154600160a060020a03169150829050565b6000611ef5613123565b1515611f0057600080fd5b60055460ff1615611f1057600080fd5b611f2160028663ffffffff6138a516565b1515611f2c57600080fd5b611f4060028686868663ffffffff61393716565b50600195945050505050565b60055460009081908190819060ff1615611f6557600080fd5b851515611f7157600080fd5b60008681526008602052604090208054909350600160a060020a03161515611f9857600080fd5b825460028085018054604080516020601f600019600186161561010002019094169590950492830185900485028101850190915281815261203f943394600160a060020a03909116939192908301828280156120355780601f1061200a57610100808354040283529160200191612035565b820191906000526020600020905b81548152906001019060200180831161201857829003601f168201915b5050505050613980565b50604080518615158152905187917fb3932da477fe5d6c8ff2eafef050c0f3a1af18fc07121001482600f36f3715d8919081900360200190a26000868152600960205260409020915084151561218a575060005b815481101561218157815433908390839081106120ac57fe5b600091825260209091200154600160a060020a03161415612179578154829060001981019081106120d957fe5b6000918252602090912001548254600160a060020a03909116908390839081106120ff57fe5b60009182526020909120018054600160a060020a031916600160a060020a039290921691909117905581548290600019810190811061213a57fe5b60009182526020909120018054600160a060020a031916905581546121638360001983016142b5565b50600383018054600190810190915593506122e2565b600101612093565b600093506122e2565b5060005b81548110156121cf57815433908390839081106121a757fe5b600091825260209091200154600160a060020a031614156121c757600080fd5b60010161218e565b8154600181018355600083815260209020018054600160a060020a03191633179055600383018054600019019081905515156122dd57604080516080810182528454600160a060020a031681526001808601546020808401919091526002808801805486516101009582161595909502600019011691909104601f810183900483028401830186528084526122d6958c95948a9491860193909290918301828280156122bc5780601f10612291576101008083540402835291602001916122bc565b820191906000526020600020905b81548152906001019060200180831161229f57829003601f168201915b505050505081526020016003820154815250506001613b31565b93506122e2565b600193505b50505092915050565b6000838152600260209081526040808320600160a060020a03861684526003018252808320600160e060020a03198516845290915290205460ff169392505050565b7fdc3d2a7b0000000000000000000000000000000000000000000000000000000090565b612359613123565b151561236457600080fd5b60055460ff161561237457600080fd5b6005805460ff191660011790556040517f4b314b34e912fda7f95e7d23e9c8c95f82f0aff1984e4ce592a0b005f905562490600090a1565b6000818152600360209081526040918290208054835181840281018401909452808452606093928301828280156111365760200282019190600052602060002090815481526001909101906020018083116111215750505050509050919050565b600481565b60005481565b60075481565b600881565b60055460009081908190819060ff161561243c57600080fd5b6124498a8a8a8a8a61376e565b151561245457600080fd5b61245c613123565b92508215156126aa576040517fb61d27f600000000000000000000000000000000000000000000000000000000815230600482018181526000602484018190526060604485019081523660648601819052939463b61d27f694869484939192909190608401848480828437820191505095505050505050602060405180830381600087803b1580156124ed57600080fd5b505af1158015612501573d6000803e3d6000fd5b505050506040513d602081101561251757600080fd5b8101908080519060200190929190505050935087600160a060020a03168a857fe6b6db97dedfb44cbced367387e40b3f92dbee1b1be87f9367f7b673532b0d698c8b8b8b60405180858152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156125a657818101518382015260200161258e565b50505050905090810190601f1680156125d35780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b838110156126065781810151838201526020016125ee565b50505050905090810190601f1680156126335780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b8381101561266657818101518382015260200161264e565b50505050905090810190601f1680156126935780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a46128c7565b6126b4888b610ed9565b6000818152600a6020526040902060020154909250600160a060020a031615156126ec576126e7828b8b8b8b8b8b613db3565b6128c7565b506000818152600a60209081526040909120600181018a90558751909161271a9160038401918a01906142de565b50855161273090600483019060208901906142de565b50845161274690600583019060208801906142de565b5087600160a060020a03168a83600019167f3bab293fc00db832d7619a9299914251b8747c036867ec056cbd506f60135b138c8b8b8b60405180858152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156127c75781810151838201526020016127af565b50505050905090810190601f1680156127f45780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b8381101561282757818101518382015260200161280f565b50505050905090810190601f1680156128545780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b8381101561288757818101518382015260200161286f565b50505050905090810190601f1680156128b45780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a45b5050509695505050505050565b600581565b60055460009060ff16156128ec57600080fd5b6128f833858585613350565b949350505050565b600781565b7f107653790000000000000000000000000000000000000000000000000000000090565b600080805b6004811015611a735780600802848281518110151561294957fe5b60209101015160029190910a7f0100000000000000000000000000000000000000000000000000000000000000918290049091027fff000000000000000000000000000000000000000000000000000000000000001604919091179060010161292e565b600080600060608060606129bf61422e565b6000888152600a6020908152604091829020825160c0810184528154815260018083015482850152600280840154600160a060020a0316838701526003840180548751601f948216156101000260001901909116929092049283018690048602820186019096528181529194929360608601939190830182828015612a855780601f10612a5a57610100808354040283529160200191612a85565b820191906000526020600020905b815481529060010190602001808311612a6857829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015612b195780601f10612aee57610100808354040283529160200191612b19565b820191906000526020600020905b815481529060010190602001808311612afc57829003601f168201915b505050918352505060058201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015612bad5780601f10612b8257610100808354040283529160200191612bad565b820191906000526020600020905b815481529060010190602001808311612b9057829003601f168201915b505050919092525050506040810151909150600160a060020a03161515612bd357600080fd5b8051602082015160408301516060840151608085015160a090950151939c929b5090995097509195509350915050565b60045490565b60055460009060ff1615612c1c57600080fd5b612c24613123565b1515612c2f57600080fd5b60008211612c3c57600080fd5b612c4660016123ac565b51905080821115612c5657600080fd5b50600055565b600061107f6002848463ffffffff61315516565b60055460009081908190819060ff1615612c8957600080fd5b612c968b8b8b8b8b61376e565b1515612ca157600080fd5b612e3a8b8b8b8b8b8b6040516020018087815260200186815260200185600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140184805190602001908083835b60208310612d0f5780518252601f199092019160209182019101612cf0565b51815160209384036101000a600019018019909216911617905286519190930192860191508083835b60208310612d575780518252601f199092019160209182019101612d38565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310612d9f5780518252601f199092019160209182019101612d80565b6001836020036101000a03801982511681845116808217855250505050505090500196505050505050506040516020818303038152906040526040518082805190602001908083835b60208310612e075780518252601f199092019160209182019101612de8565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902086611153565b9250612e58612e4884611ea8565b600290600163ffffffff61315516565b1515612e6357600080fd5b612e6d898c610ed9565b6000818152600a6020526040902060020154909250600160a060020a03161515612ea557612ea0828c8c8c8c8c8c613db3565b613080565b506000818152600a60209081526040909120600181018b905588519091612ed39160038401918b01906142de565b508651612ee990600483019060208a01906142de565b508551612eff90600583019060208901906142de565b5088600160a060020a03168b83600019167f3bab293fc00db832d7619a9299914251b8747c036867ec056cbd506f60135b138d8c8c8c60405180858152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015612f80578181015183820152602001612f68565b50505050905090810190601f168015612fad5780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015612fe0578181015183820152602001612fc8565b50505050905090810190601f16801561300d5780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b83811015613040578181015183820152602001613028565b50505050905090810190601f16801561306d5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a45b5060019a9950505050505050505050565b60055460009060ff16156130a457600080fd5b6130ac613123565b15156130b757600080fd5b600082116130c457600080fd5b6130ce60026123ac565b519050808211156130de57600080fd5b50600155565b600681565b6130f1613123565b15156130fc57600080fd5b600160a060020a038116151561311157600080fd5b80600160a060020a0316ff5b600c5481565b60003330141561313557506001610e27565b60005460011461314457600080fd5b613150612e4833611ea8565b905090565b600061315f61420e565b60008481526020868152604080832081518154608094810282018501909352606081018381529093919284928491908401828280156131bd57602002820191906000526020600020905b8154815260200190600101908083116131a9575b50505091835250506001820154602082015260029091015460409182015281015190925015156131f05760009250613230565b5060005b81515181101561323057815180518591908390811061320f57fe5b9060200190602002015114156132285760019250613230565b6001016131f4565b50509392505050565b61324c600284848463ffffffff61402b16565b6040518190839085907f480000bb1edad8ca1470381cc334b1917fbd51c6531f3a623ea8e0ec7e38a6e990600090a4505050565b6000806000808451604114151561329a57600093506122e2565b50505060208201516040830151606084015160001a601b60ff821610156132bf57601b015b8060ff16601b141580156132d757508060ff16601c14155b156132e557600093506122e2565b60408051600080825260208083018085528a905260ff8516838501526060830187905260808301869052925160019360a0808501949193601f19840193928390039091019190865af115801561333f573d6000803e3d6000fd5b5050506020604051035193506122e2565b60008061335b61435c565b613366878786613980565b91506133773087878760075461409c565b92508486600160a060020a0316847f8afcfabcb00e47a53a8fc3e9f23ff47ee1926194bb1350dd007c50b412a6cee8876040518080602001828103825283818151815260200191508051906020019080838360005b838110156133e45781810151838201526020016133cc565b50505050905090810190601f1680156134115780820380516001836020036101000a031916815260200191505b509250505060405180910390a45060078054600101905560408051608081018252600160a060020a0387168152602081018690529081018490526060810182905281151561346b5761346583826000613b31565b50613502565b60008381526008602090815260409182902083518154600160a060020a031916600160a060020a039091161781558382015160018201559183015180518493926134bc9260028501929101906142de565b50606091909101516003909101556000838152600960209081526040822080546001810182559083529120018054600160a060020a031916600160a060020a0389161790555b5050949350505050565b6000808061353a857f01ffc9a7000000000000000000000000000000000000000000000000000000006141c2565b909250905081158061354a575080155b1561355857600092506135bb565b61356a85600160e060020a03196141c2565b909250905081158061357b57508015155b1561358957600092506135bb565b61359385856141c2565b90925090506001821480156135a85750806001145b156135b657600192506135bb565b600092505b505092915050565b6000828152602084905260408120600181015491805b8254821015613683578483838154811015156135f157fe5b906000526020600020015414156136785782548390600019810190811061361457fe5b9060005260206000200154838381548110151561362d57fe5b60009182526020909120015582548390600019810190811061364b57fe5b600091825260208220015582546136668460001983016142b5565b50600287018054600019019055613683565b6001909101906135d9565b825415156136b5576000868152602088905260408120906136a4828261438e565b506000600182018190556002909101555b5050600083815260018601602052604081205b805482101561376457805486908290849081106136e157fe5b60009182526020909120015414156137595780548190600019810190811061370557fe5b9060005260206000200154818381548110151561371e57fe5b60009182526020909120015580548190600019810190811061373c57fe5b600091825260208220015580546137578260001983016142b5565b505b6001909101906136c8565b5050509392505050565b600080600186141561389c5761378e613788308986610f86565b85611153565b905080600160a060020a031685600160a060020a031614156137b357600191506113d0565b600160a060020a0385163014156137e7576137e06137d082611ea8565b600290600363ffffffff61315516565b91506113d0565b6138086137f261232d565b600160a060020a0387169063ffffffff61350c16565b1561389c5784600160a060020a031663d202158d61382583611ea8565b6040805160e060020a63ffffffff85160281526004810192909252600360248301525160448083019260209291908290030181600087803b15801561386957600080fd5b505af115801561387d573d6000803e3d6000fd5b505050506040513d602081101561389357600080fd5b505191506113d0565b600091506113d0565b60006138af61420e565b600083815260208581526040918290208251815460809381028201840190945260608101848152909391928492849184018282801561390d57602002820191906000526020600020905b8154815260200190600101908083116138f9575b50505091835250506001820154602082015260029091015460409182015201511515949350505050565b600093845260209485526040808520600160a060020a0394909416855260039093018552828420600160e060020a031992909216845293529020805460ff191682151517905590565b6000600160a060020a038316301415613a2b57600160a060020a0384163014156139ad5750600054613a26565b6139b9612e4885611ea8565b80613a1857506139db6139cb85611ea8565b600290600763ffffffff61315516565b8015613a1857507f1d38124000000000000000000000000000000000000000000000000000000000613a0c83612929565b600160e060020a031916145b156115085750600054600019015b61107f565b600160a060020a0383161515613a4057600080fd5b600160a060020a038416301415613a5a575060015461107f565b613a75613a6685611ea8565b6002908163ffffffff61315516565b80613a975750613a97613a8785611ea8565b600290600663ffffffff61315516565b80613b1f5750613ab9613aa985611ea8565b600290600863ffffffff61315516565b8015613b1f575060026000613acd86611ea8565b815260208082019290925260409081016000908120600160a060020a0387168252600301909252812090613b0084612929565b600160e060020a031916815260208101919091526040016000205460ff165b1561150857506001546000190161107f565b81516000908190600160a060020a03161515613b4c57600080fd5b8360000151600160a060020a03168460200151856040015160405180828051906020019080838360005b83811015613b8e578181015183820152602001613b76565b50505050905090810190601f168015613bbb5780820380516001836020036101000a031916815260200191505b5091505060006040518083038185875af1925050509050801515613c935783602001518460000151600160a060020a0316867fe10c49d9f7c71da23262367013434763cfdb2332267641728d25cd712c5c6a6887604001516040518080602001828103825283818151815260200191508051906020019080838360005b83811015613c50578181015183820152602001613c38565b50505050905090810190601f168015613c7d5780820380516001836020036101000a031916815260200191505b509250505060405180910390a460009150613dab565b83602001518460000151600160a060020a0316867f1f920dbda597d7bf95035464170fa58d0a4b57f13a1c315ace6793b9f63688b887604001516040518080602001828103825283818151815260200191508051906020019080838360005b83811015613d0a578181015183820152602001613cf2565b50505050905090810190601f168015613d375780820380516001836020036101000a031916815260200191505b509250505060405180910390a4821515613d545760019150613dab565b60008581526008602052604081208054600160a060020a03191681556001810182905590613d85600283018261426e565b506000600391909101819055858152600960205260408120613da69161438e565b600191505b509392505050565b6040805160c0810182528781526020808201888152600160a060020a03888116848601908152606085018981526080860189905260a0860188905260008e8152600a865296909620855181559251600184015551600283018054600160a060020a0319169190921617905592518051929392613e3592600385019201906142de565b5060808201518051613e519160048401916020909101906142de565b5060a08201518051613e6d9160058401916020909101906142de565b5050506000868152600b60209081526040808320805460018181018355918552838520018b9055600c80549091019055805188815260808184018181528851918301919091528751600160a060020a038a16958c958e957f46149b18aa084502c3f12bc75e19eda8bda8d102b82cce8474677a6d0d5f43c5958e958d958d958d959394929392850192606086019260a0870192918a01918190849084905b83811015613f23578181015183820152602001613f0b565b50505050905090810190601f168015613f505780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015613f83578181015183820152602001613f6b565b50505050905090810190601f168015613fb05780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b83811015613fe3578181015183820152602001613fcb565b50505050905090810190601f1680156140105780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a450505050505050565b600083815260208581526040822080546001810182558184529190922001839055600281015415156140665760028101849055600181018290555b50506000908152600180840160209081526040832080548084018255908452922090910191909155600290910180549091019055565b600085858585856040516020018086600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140185600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140184815260200183805190602001908083835b602083106141295780518252601f19909201916020918201910161410a565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193975095508594508601925081905083835b6020831061418c5780518252601f19909201916020918201910161416d565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209998505050505050505050565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000080825260048201839052600091829190602081818189617530fa905190969095509350505050565b604080516060818101835281526000602082018190529181019190915290565b60c06040519081016040528060008152602001600081526020016000600160a060020a031681526020016060815260200160608152602001606081525090565b50805460018160011615610100020316600290046000825580601f1061429457506142b2565b601f0160209004906000526020600020908101906142b291906143a8565b50565b8154818355818111156142d9576000838152602090206142d99181019083016143a8565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061431f57805160ff191683800117855561434c565b8280016001018555821561434c579182015b8281111561434c578251825591602001919060010190614331565b506143589291506143a8565b5090565b6080604051908101604052806000600160a060020a031681526020016000815260200160608152602001600081525090565b50805460008255906000526020600020908101906142b291905b610e2791905b8082111561435857600081556001016143ae5600a165627a7a7230582034e60e4e73aff4bb521685b727c6565b1f6e331d375a4197b4aae446b4de1cf10029";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_ERC165ID = "ERC165ID";

    public static final String FUNC_REGISTRY_TOPIC = "REGISTRY_TOPIC";

    public static final String FUNC_MANAGEMENT_KEY = "MANAGEMENT_KEY";

    public static final String FUNC_GETKEY = "getKey";

    public static final String FUNC_GETCLAIMID = "getClaimId";

    public static final String FUNC_CLAIMTOSIGN = "claimToSign";

    public static final String FUNC_ADDKEY = "addKey";

    public static final String FUNC_CONTRACT_SCHEME = "CONTRACT_SCHEME";

    public static final String FUNC_GETCLAIMIDSBYTYPE = "getClaimIdsByType";

    public static final String FUNC_RSA_TYPE = "RSA_TYPE";

    public static final String FUNC_GETTRANSACTIONCOUNT = "getTransactionCount";

    public static final String FUNC_ACTIONTHRESHOLD = "actionThreshold";

    public static final String FUNC_GETSIGNATUREADDRESS = "getSignatureAddress";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_ECDSA_TYPE = "ECDSA_TYPE";

    public static final String FUNC_DELEGATEDEXECUTE = "delegatedExecute";

    public static final String FUNC_REMOVECLAIM = "removeClaim";

    public static final String FUNC_REMOVEKEY = "removeKey";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_REFRESHCLAIM = "refreshClaim";

    public static final String FUNC_EXECUTION = "execution";

    public static final String FUNC_ADDRTOKEY = "addrToKey";

    public static final String FUNC_APPROVED = "approved";

    public static final String FUNC_METAID_TOPIC = "METAID_TOPIC";

    public static final String FUNC_SETFUNC = "setFunc";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_ACTION_KEY = "ACTION_KEY";

    public static final String FUNC_KEYCANEXECUTE = "keyCanExecute";

    public static final String FUNC_ERC725ID = "ERC725ID";

    public static final String FUNC_ECDSA_SCHEME = "ECDSA_SCHEME";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_GETKEYSBYPURPOSE = "getKeysByPurpose";

    public static final String FUNC_ENCRYPTION_KEY = "ENCRYPTION_KEY";

    public static final String FUNC_RESIDENCE_TOPIC = "RESIDENCE_TOPIC";

    public static final String FUNC_MANAGEMENTTHRESHOLD = "managementThreshold";

    public static final String FUNC_PROFILE_TOPIC = "PROFILE_TOPIC";

    public static final String FUNC_NONCE = "nonce";

    public static final String FUNC_CUSTOM_KEY = "CUSTOM_KEY";

    public static final String FUNC_ADDCLAIM = "addClaim";

    public static final String FUNC_LABEL_TOPIC = "LABEL_TOPIC";

    public static final String FUNC_EXECUTE = "execute";

    public static final String FUNC_RESTORE_KEY = "RESTORE_KEY";

    public static final String FUNC_ERC735ID = "ERC735ID";

    public static final String FUNC_GETFUNCTIONSIGNATURE = "getFunctionSignature";

    public static final String FUNC_CLAIM_SIGNER_KEY = "CLAIM_SIGNER_KEY";

    public static final String FUNC_GETCLAIM = "getClaim";

    public static final String FUNC_NUMKEYS = "numKeys";

    public static final String FUNC_CHANGEMANAGEMENTTHRESHOLD = "changeManagementThreshold";

    public static final String FUNC_KEYHASPURPOSE = "keyHasPurpose";

    public static final String FUNC_ASSIST_KEY = "ASSIST_KEY";

    public static final String FUNC_ADDCLAIMBYPROXY = "addClaimByProxy";

    public static final String FUNC_CHANGEACTIONTHRESHOLD = "changeActionThreshold";

    public static final String FUNC_DELEGATE_KEY = "DELEGATE_KEY";

    public static final String FUNC_RSA_SCHEME = "RSA_SCHEME";

    public static final String FUNC_DESTROYANDSEND = "destroyAndSend";

    public static final String FUNC_NUMCLAIMS = "numClaims";

    public static final Event CLAIMREQUESTED_EVENT = new Event("ClaimRequested",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CLAIMADDED_EVENT = new Event("ClaimAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CLAIMREMOVED_EVENT = new Event("ClaimRemoved",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CLAIMCHANGED_EVENT = new Event("ClaimChanged",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event KEYADDED_EVENT = new Event("KeyAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event KEYREMOVED_EVENT = new Event("KeyRemoved",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event EXECUTIONREQUESTED_EVENT = new Event("ExecutionRequested",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event EXECUTED_EVENT = new Event("Executed",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event APPROVED_EVENT = new Event("Approved",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event EXECUTIONFAILED_EVENT = new Event("ExecutionFailed",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event LOGPAUSE_EVENT = new Event("LogPause",
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event LOGUNPAUSE_EVENT = new Event("LogUnpause",
            Arrays.<TypeReference<?>>asList());
    ;

    @Deprecated
    protected MetaIdentity(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MetaIdentity(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MetaIdentity(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MetaIdentity(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Boolean> supportsInterface(byte[] interfaceID) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE,
                Arrays.<Type>asList(new Bytes4(interfaceID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<byte[]> ERC165ID() {
        final Function function = new Function(FUNC_ERC165ID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<BigInteger> REGISTRY_TOPIC() {
        final Function function = new Function(FUNC_REGISTRY_TOPIC,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> MANAGEMENT_KEY() {
        final Function function = new Function(FUNC_MANAGEMENT_KEY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple3<List<BigInteger>, BigInteger, byte[]>> getKey(byte[] _key) {
        final Function function = new Function(FUNC_GETKEY,
                Arrays.<Type>asList(new Bytes32(_key)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteCall<Tuple3<List<BigInteger>, BigInteger, byte[]>>(
                new Callable<Tuple3<List<BigInteger>, BigInteger, byte[]>>() {
                    @Override
                    public Tuple3<List<BigInteger>, BigInteger, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        if (results.size() == 0) {
                            return null;
                        }
                        return new Tuple3<List<BigInteger>, BigInteger, byte[]>(
                                (List<BigInteger>)(List<?>)convertToNative((List<Uint256>) results.get(0).getValue()),
                                (BigInteger) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<byte[]> getClaimId(String issuer, BigInteger topic) {
        final Function function = new Function(FUNC_GETCLAIMID,
                Arrays.<Type>asList(new Address(issuer),
                new Uint256(topic)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<byte[]> claimToSign(String subject, BigInteger topic, byte[] data) {
        final Function function = new Function(FUNC_CLAIMTOSIGN,
                Arrays.<Type>asList(new Address(subject),
                new Uint256(topic),
                new DynamicBytes(data)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<TransactionReceipt> addKey(byte[] _key, BigInteger _purpose, BigInteger _keyType) {
        final Function function = new Function(
                FUNC_ADDKEY, 
                Arrays.<Type>asList(new Bytes32(_key),
                new Uint256(_purpose),
                new Uint256(_keyType)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> CONTRACT_SCHEME() {
        final Function function = new Function(FUNC_CONTRACT_SCHEME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<List> getClaimIdsByType(BigInteger _topic) {
        final Function function = new Function(FUNC_GETCLAIMIDSBYTYPE,
                Arrays.<Type>asList(new Uint256(_topic)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<BigInteger> RSA_TYPE() {
        final Function function = new Function(FUNC_RSA_TYPE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getTransactionCount() {
        final Function function = new Function(FUNC_GETTRANSACTIONCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> actionThreshold() {
        final Function function = new Function(FUNC_ACTIONTHRESHOLD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getSignatureAddress(byte[] toSign, byte[] signature) {
        final Function function = new Function(FUNC_GETSIGNATUREADDRESS,
                Arrays.<Type>asList(new Bytes32(toSign),
                new DynamicBytes(signature)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> unpause() {
        final Function function = new Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> ECDSA_TYPE() {
        final Function function = new Function(FUNC_ECDSA_TYPE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> delegatedExecute(String _to, BigInteger _value, byte[] _data, BigInteger _nonce, byte[] _sig) {
        final Function function = new Function(
                FUNC_DELEGATEDEXECUTE, 
                Arrays.<Type>asList(new Address(_to),
                new Uint256(_value),
                new DynamicBytes(_data),
                new Uint256(_nonce),
                new DynamicBytes(_sig)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeClaim(byte[] _claimId) {
        final Function function = new Function(
                FUNC_REMOVECLAIM, 
                Arrays.<Type>asList(new Bytes32(_claimId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeKey(byte[] _key, BigInteger _purpose) {
        final Function function = new Function(
                FUNC_REMOVEKEY, 
                Arrays.<Type>asList(new Bytes32(_key),
                new Uint256(_purpose)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> paused() {
        final Function function = new Function(FUNC_PAUSED,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> refreshClaim(byte[] _claimId) {
        final Function function = new Function(
                FUNC_REFRESHCLAIM, 
                Arrays.<Type>asList(new Bytes32(_claimId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple4<String, BigInteger, byte[], BigInteger>> execution(BigInteger param0) {
        final Function function = new Function(FUNC_EXECUTION,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<String, BigInteger, byte[], BigInteger>>(
                new Callable<Tuple4<String, BigInteger, byte[], BigInteger>>() {
                    @Override
                    public Tuple4<String, BigInteger, byte[], BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, BigInteger, byte[], BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<byte[]> addrToKey(String addr) {
        final Function function = new Function(FUNC_ADDRTOKEY,
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<String> approved(BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_APPROVED,
                Arrays.<Type>asList(new Uint256(param0),
                new Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> METAID_TOPIC() {
        final Function function = new Function(FUNC_METAID_TOPIC,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setFunc(byte[] _key, String _to, byte[] _func, Boolean _executable) {
        final Function function = new Function(
                FUNC_SETFUNC, 
                Arrays.<Type>asList(new Bytes32(_key),
                new Address(_to),
                new Bytes4(_func),
                new Bool(_executable)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> approve(BigInteger _id, Boolean _approve) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new Uint256(_id),
                new Bool(_approve)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> ACTION_KEY() {
        final Function function = new Function(FUNC_ACTION_KEY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> keyCanExecute(byte[] _key, String _to, byte[] _func) {
        final Function function = new Function(FUNC_KEYCANEXECUTE,
                Arrays.<Type>asList(new Bytes32(_key),
                new Address(_to),
                new Bytes4(_func)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<byte[]> ERC725ID() {
        final Function function = new Function(FUNC_ERC725ID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<BigInteger> ECDSA_SCHEME() {
        final Function function = new Function(FUNC_ECDSA_SCHEME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> pause() {
        final Function function = new Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getKeysByPurpose(BigInteger _purpose) {
        final Function function = new Function(FUNC_GETKEYSBYPURPOSE,
                Arrays.<Type>asList(new Uint256(_purpose)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<BigInteger> ENCRYPTION_KEY() {
        final Function function = new Function(FUNC_ENCRYPTION_KEY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> RESIDENCE_TOPIC() {
        final Function function = new Function(FUNC_RESIDENCE_TOPIC,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> managementThreshold() {
        final Function function = new Function(FUNC_MANAGEMENTTHRESHOLD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> PROFILE_TOPIC() {
        final Function function = new Function(FUNC_PROFILE_TOPIC,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> nonce() {
        final Function function = new Function(FUNC_NONCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> CUSTOM_KEY() {
        final Function function = new Function(FUNC_CUSTOM_KEY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addClaim(BigInteger _topic, BigInteger _scheme, String issuer, byte[] _signature, byte[] _data, String _uri) {
        final Function function = new Function(
                FUNC_ADDCLAIM, 
                Arrays.<Type>asList(new Uint256(_topic),
                new Uint256(_scheme),
                new Address(issuer),
                new DynamicBytes(_signature),
                new DynamicBytes(_data),
                new Utf8String(_uri)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> LABEL_TOPIC() {
        final Function function = new Function(FUNC_LABEL_TOPIC,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> execute(String _to, BigInteger _value, byte[] _data) {
        final Function function = new Function(
                FUNC_EXECUTE, 
                Arrays.<Type>asList(new Address(_to),
                new Uint256(_value),
                new DynamicBytes(_data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> RESTORE_KEY() {
        final Function function = new Function(FUNC_RESTORE_KEY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<byte[]> ERC735ID() {
        final Function function = new Function(FUNC_ERC735ID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<byte[]> getFunctionSignature(byte[] b) {
        final Function function = new Function(FUNC_GETFUNCTIONSIGNATURE,
                Arrays.<Type>asList(new DynamicBytes(b)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<BigInteger> CLAIM_SIGNER_KEY() {
        final Function function = new Function(FUNC_CLAIM_SIGNER_KEY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple6<BigInteger, BigInteger, String, byte[], byte[], String>> getClaim(byte[] _claimId) {
        final Function function = new Function(FUNC_GETCLAIM,
                Arrays.<Type>asList(new Bytes32(_claimId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple6<BigInteger, BigInteger, String, byte[], byte[], String>>(
                new Callable<Tuple6<BigInteger, BigInteger, String, byte[], byte[], String>>() {
                    @Override
                    public Tuple6<BigInteger, BigInteger, String, byte[], byte[], String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<BigInteger, BigInteger, String, byte[], byte[], String>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (byte[]) results.get(3).getValue(), 
                                (byte[]) results.get(4).getValue(), 
                                (String) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> numKeys() {
        final Function function = new Function(FUNC_NUMKEYS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> changeManagementThreshold(BigInteger threshold) {
        final Function function = new Function(
                FUNC_CHANGEMANAGEMENTTHRESHOLD, 
                Arrays.<Type>asList(new Uint256(threshold)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> keyHasPurpose(byte[] _key, BigInteger purpose) {
        final Function function = new Function(FUNC_KEYHASPURPOSE,
                Arrays.<Type>asList(new Bytes32(_key),
                new Uint256(purpose)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> ASSIST_KEY() {
        final Function function = new Function(FUNC_ASSIST_KEY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addClaimByProxy(BigInteger _topic, BigInteger _scheme, String issuer, byte[] _signature, byte[] _data, String _uri, byte[] _idSignature) {
        final Function function = new Function(
                FUNC_ADDCLAIMBYPROXY, 
                Arrays.<Type>asList(new Uint256(_topic),
                new Uint256(_scheme),
                new Address(issuer),
                new DynamicBytes(_signature),
                new DynamicBytes(_data),
                new Utf8String(_uri),
                new DynamicBytes(_idSignature)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeActionThreshold(BigInteger threshold) {
        final Function function = new Function(
                FUNC_CHANGEACTIONTHRESHOLD, 
                Arrays.<Type>asList(new Uint256(threshold)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> DELEGATE_KEY() {
        final Function function = new Function(FUNC_DELEGATE_KEY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> RSA_SCHEME() {
        final Function function = new Function(FUNC_RSA_SCHEME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> destroyAndSend(String _recipient) {
        final Function function = new Function(
                FUNC_DESTROYANDSEND, 
                Arrays.<Type>asList(new Address(_recipient)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> numClaims() {
        final Function function = new Function(FUNC_NUMCLAIMS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public List<ClaimRequestedEventResponse> getClaimRequestedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CLAIMREQUESTED_EVENT, transactionReceipt);
        ArrayList<ClaimRequestedEventResponse> responses = new ArrayList<ClaimRequestedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ClaimRequestedEventResponse typedResponse = new ClaimRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimRequestId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.topic = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.issuer = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.scheme = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.signature = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.uri = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ClaimRequestedEventResponse> claimRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ClaimRequestedEventResponse>() {
            @Override
            public ClaimRequestedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(CLAIMREQUESTED_EVENT, log);
                ClaimRequestedEventResponse typedResponse = new ClaimRequestedEventResponse();
                typedResponse.log = log;
                typedResponse.claimRequestId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.topic = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.issuer = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.scheme = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.signature = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.uri = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ClaimRequestedEventResponse> claimRequestedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CLAIMREQUESTED_EVENT));

        return claimRequestedEventFlowable(filter);
    }

    public List<ClaimAddedEventResponse> getClaimAddedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CLAIMADDED_EVENT, transactionReceipt);
        ArrayList<ClaimAddedEventResponse> responses = new ArrayList<ClaimAddedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ClaimAddedEventResponse typedResponse = new ClaimAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.topic = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.issuer = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.scheme = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.signature = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.uri = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ClaimAddedEventResponse> claimAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ClaimAddedEventResponse>() {
            @Override
            public ClaimAddedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(CLAIMADDED_EVENT, log);
                ClaimAddedEventResponse typedResponse = new ClaimAddedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.topic = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.issuer = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.scheme = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.signature = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.uri = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ClaimAddedEventResponse> claimAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CLAIMADDED_EVENT));
        return claimAddedEventFlowable(filter);
    }

    public List<ClaimRemovedEventResponse> getClaimRemovedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CLAIMREMOVED_EVENT, transactionReceipt);
        ArrayList<ClaimRemovedEventResponse> responses = new ArrayList<ClaimRemovedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ClaimRemovedEventResponse typedResponse = new ClaimRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.topic = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.issuer = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.scheme = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.signature = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.uri = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ClaimRemovedEventResponse> claimRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ClaimRemovedEventResponse>() {
            @Override
            public ClaimRemovedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(CLAIMREMOVED_EVENT, log);
                ClaimRemovedEventResponse typedResponse = new ClaimRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.topic = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.issuer = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.scheme = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.signature = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.uri = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ClaimRemovedEventResponse> claimRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CLAIMREMOVED_EVENT));
        return claimRemovedEventFlowable(filter);
    }

    public List<ClaimChangedEventResponse> getClaimChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CLAIMCHANGED_EVENT, transactionReceipt);
        ArrayList<ClaimChangedEventResponse> responses = new ArrayList<ClaimChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ClaimChangedEventResponse typedResponse = new ClaimChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.claimId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.topic = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.issuer = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.scheme = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.signature = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.uri = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ClaimChangedEventResponse> claimChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ClaimChangedEventResponse>() {
            @Override
            public ClaimChangedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(CLAIMCHANGED_EVENT, log);
                ClaimChangedEventResponse typedResponse = new ClaimChangedEventResponse();
                typedResponse.log = log;
                typedResponse.claimId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.topic = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.issuer = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.scheme = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.signature = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.uri = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ClaimChangedEventResponse> claimChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CLAIMCHANGED_EVENT));
        return claimChangedEventFlowable(filter);
    }

    public List<KeyAddedEventResponse> getKeyAddedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(KEYADDED_EVENT, transactionReceipt);
        ArrayList<KeyAddedEventResponse> responses = new ArrayList<KeyAddedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            KeyAddedEventResponse typedResponse = new KeyAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.key = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.purpose = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.keyType = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<KeyAddedEventResponse> keyAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, KeyAddedEventResponse>() {
            @Override
            public KeyAddedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(KEYADDED_EVENT, log);
                KeyAddedEventResponse typedResponse = new KeyAddedEventResponse();
                typedResponse.log = log;
                typedResponse.key = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.purpose = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.keyType = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<KeyAddedEventResponse> keyAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(KEYADDED_EVENT));
        return keyAddedEventFlowable(filter);
    }

    public List<KeyRemovedEventResponse> getKeyRemovedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(KEYREMOVED_EVENT, transactionReceipt);
        ArrayList<KeyRemovedEventResponse> responses = new ArrayList<KeyRemovedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            KeyRemovedEventResponse typedResponse = new KeyRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.key = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.purpose = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.keyType = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<KeyRemovedEventResponse> keyRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, KeyRemovedEventResponse>() {
            @Override
            public KeyRemovedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(KEYREMOVED_EVENT, log);
                KeyRemovedEventResponse typedResponse = new KeyRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.key = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.purpose = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.keyType = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<KeyRemovedEventResponse> keyRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(KEYREMOVED_EVENT));
        return keyRemovedEventFlowable(filter);
    }

    public List<ExecutionRequestedEventResponse> getExecutionRequestedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(EXECUTIONREQUESTED_EVENT, transactionReceipt);
        ArrayList<ExecutionRequestedEventResponse> responses = new ArrayList<ExecutionRequestedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ExecutionRequestedEventResponse typedResponse = new ExecutionRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.executionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ExecutionRequestedEventResponse> executionRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ExecutionRequestedEventResponse>() {
            @Override
            public ExecutionRequestedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(EXECUTIONREQUESTED_EVENT, log);
                ExecutionRequestedEventResponse typedResponse = new ExecutionRequestedEventResponse();
                typedResponse.log = log;
                typedResponse.executionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ExecutionRequestedEventResponse> executionRequestedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXECUTIONREQUESTED_EVENT));
        return executionRequestedEventFlowable(filter);
    }

    public List<ExecutedEventResponse> getExecutedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(EXECUTED_EVENT, transactionReceipt);
        ArrayList<ExecutedEventResponse> responses = new ArrayList<ExecutedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ExecutedEventResponse typedResponse = new ExecutedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.executionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ExecutedEventResponse> executedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ExecutedEventResponse>() {
            @Override
            public ExecutedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(EXECUTED_EVENT, log);
                ExecutedEventResponse typedResponse = new ExecutedEventResponse();
                typedResponse.log = log;
                typedResponse.executionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ExecutedEventResponse> executedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXECUTED_EVENT));
        return executedEventFlowable(filter);
    }

    public List<ApprovedEventResponse> getApprovedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVED_EVENT, transactionReceipt);
        ArrayList<ApprovedEventResponse> responses = new ArrayList<ApprovedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovedEventResponse typedResponse = new ApprovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.executionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovedEventResponse> approvedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovedEventResponse>() {
            @Override
            public ApprovedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVED_EVENT, log);
                ApprovedEventResponse typedResponse = new ApprovedEventResponse();
                typedResponse.log = log;
                typedResponse.executionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovedEventResponse> approvedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVED_EVENT));
        return approvedEventFlowable(filter);
    }

    public List<ExecutionFailedEventResponse> getExecutionFailedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(EXECUTIONFAILED_EVENT, transactionReceipt);
        ArrayList<ExecutionFailedEventResponse> responses = new ArrayList<ExecutionFailedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ExecutionFailedEventResponse typedResponse = new ExecutionFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.executionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ExecutionFailedEventResponse> executionFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ExecutionFailedEventResponse>() {
            @Override
            public ExecutionFailedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(EXECUTIONFAILED_EVENT, log);
                ExecutionFailedEventResponse typedResponse = new ExecutionFailedEventResponse();
                typedResponse.log = log;
                typedResponse.executionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ExecutionFailedEventResponse> executionFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXECUTIONFAILED_EVENT));
        return executionFailedEventFlowable(filter);
    }

    public List<LogPauseEventResponse> getLogPauseEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGPAUSE_EVENT, transactionReceipt);
        ArrayList<LogPauseEventResponse> responses = new ArrayList<LogPauseEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogPauseEventResponse typedResponse = new LogPauseEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogPauseEventResponse> logPauseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, LogPauseEventResponse>() {
            @Override
            public LogPauseEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(LOGPAUSE_EVENT, log);
                LogPauseEventResponse typedResponse = new LogPauseEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Flowable<LogPauseEventResponse> logPauseEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGPAUSE_EVENT));
        return logPauseEventFlowable(filter);
    }

    public List<LogUnpauseEventResponse> getLogUnpauseEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGUNPAUSE_EVENT, transactionReceipt);
        ArrayList<LogUnpauseEventResponse> responses = new ArrayList<LogUnpauseEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogUnpauseEventResponse typedResponse = new LogUnpauseEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogUnpauseEventResponse> logUnpauseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, LogUnpauseEventResponse>() {
            @Override
            public LogUnpauseEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(LOGUNPAUSE_EVENT, log);
                LogUnpauseEventResponse typedResponse = new LogUnpauseEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Flowable<LogUnpauseEventResponse> logUnpauseEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGUNPAUSE_EVENT));
        return logUnpauseEventFlowable(filter);
    }

    @Deprecated
    public static MetaIdentity load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MetaIdentity(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MetaIdentity load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MetaIdentity(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MetaIdentity load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MetaIdentity(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MetaIdentity load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MetaIdentity(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MetaIdentity> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _managementKey) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_managementKey)));
        return deployRemoteCall(MetaIdentity.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<MetaIdentity> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _managementKey) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_managementKey)));
        return deployRemoteCall(MetaIdentity.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<MetaIdentity> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _managementKey) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_managementKey)));
        return deployRemoteCall(MetaIdentity.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<MetaIdentity> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _managementKey) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_managementKey)));
        return deployRemoteCall(MetaIdentity.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ClaimRequestedEventResponse {
        public Log log;

        public BigInteger claimRequestId;

        public BigInteger topic;

        public String issuer;

        public BigInteger scheme;

        public byte[] signature;

        public byte[] data;

        public String uri;
    }

    public static class ClaimAddedEventResponse {
        public Log log;

        public byte[] claimId;

        public BigInteger topic;

        public String issuer;

        public BigInteger scheme;

        public byte[] signature;

        public byte[] data;

        public String uri;
    }

    public static class ClaimRemovedEventResponse {
        public Log log;

        public byte[] claimId;

        public BigInteger topic;

        public String issuer;

        public BigInteger scheme;

        public byte[] signature;

        public byte[] data;

        public String uri;
    }

    public static class ClaimChangedEventResponse {
        public Log log;

        public byte[] claimId;

        public BigInteger topic;

        public String issuer;

        public BigInteger scheme;

        public byte[] signature;

        public byte[] data;

        public String uri;
    }

    public static class KeyAddedEventResponse {
        public Log log;

        public byte[] key;

        public BigInteger purpose;

        public BigInteger keyType;
    }

    public static class KeyRemovedEventResponse {
        public Log log;

        public byte[] key;

        public BigInteger purpose;

        public BigInteger keyType;
    }

    public static class ExecutionRequestedEventResponse {
        public Log log;

        public BigInteger executionId;

        public String to;

        public BigInteger value;

        public byte[] data;
    }

    public static class ExecutedEventResponse {
        public Log log;

        public BigInteger executionId;

        public String to;

        public BigInteger value;

        public byte[] data;
    }

    public static class ApprovedEventResponse {
        public Log log;

        public BigInteger executionId;

        public Boolean approved;
    }

    public static class ExecutionFailedEventResponse {
        public Log log;

        public BigInteger executionId;

        public String to;

        public BigInteger value;

        public byte[] data;
    }

    public static class LogPauseEventResponse {
        public Log log;
    }

    public static class LogUnpauseEventResponse {
        public Log log;
    }
}
